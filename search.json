[{"title":"使用Babel转码器转码ES6","date":"2021-01-06T16:24:20.000Z","url":"/posts/9ec7c548.html","categories":[["ES6","/categories/ES6/"]],"content":" Babel 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在老版本的浏览器执行。这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持 第一种方式 创建项目的包管理文件package.jsonnpm init -y -y , 生成项目信息的默认配置值，减少手动单项确认的步骤 安装babelnpm install --save-dev @babel/core 安装转码需要的规则集npm install --save-dev @babel/preset-env 手动添加.babelrc配置文件。Babel 的配置文件是.babelrc，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件，该文件用来设置转码规则和插件 安装命令行转码工具，开始转码 第二种方式 创建项目的包管理文件package.jsonnpm init -y 安装转码插件 babel-preset-es2015npm install --save-dev babel-preset-es2015 babel-cli 配置.babelrc文件 安装babel-cli,开启命令行转码babel src/a.js -o dist/a.js 简化转码命令为npm run build "},{"title":"Git基础使用总结","date":"2020-12-15T14:07:49.000Z","url":"/posts/b93f88f2.html","tags":[["git基础总结","/tags/git%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"]],"categories":[["Git","/categories/Git/"]],"content":" Git简介 Git是一种分布式控制系统，在这种系统中，客户端并不只是提取最新的文件快照，而是将代码仓库全部镜像到本地。如遇故障，可最快程度恢复项目文件。 Git在进行项目管理时，存储的不是项目版本与版本之间的差异，而存的是索引，既每次的最新项目快照。最终每个客户端都可以获取项目的全部历史记录。 Git 会使用操作系统默认的文本编辑器，通常是 Vim。Vim 和 Emacs 是像 Linux 与 Mac 等基于 Unix 的系统上开发者经常使用的流行的文本编辑器。 Git 中所有数据在存储前都计算校验和，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。 Git 有三种状态：已提交（committed）、已修改（modified）和已暂存（staged，基本的 Git 工作流程如下： 在工作目录中修改文件。 暂存文件，将文件的快照放入暂存区域。 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。 Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。git –version 版本检查 /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 .git/config：针对该仓库。 git用户信息配置，主要用于识别coder git config –global user.name “ “ git config –global user.email examples@examples.com git config –list 检查配置信息 Git初始化配置 在目标文件夹右键Git Bash Here,即新建git仓库 git仓库目录 hooks 客户端或服务器端的钩子脚本 info 一个全局性排除文件 objects 所有数据内容 refs 指向分支数据的提交对象的指针 HEAD 文件指示目前被检出的分支 index 文件保存暂存区信息 config 包含项目的特殊配置选项 description 用来显示仓库的描述信息 Git底层命令 Linux命令 clear 清除屏幕 echo ‘ ‘ 向控制台文件输出信息 echo ‘version’ &gt;text.txt,即是向该文本中输入version内容 ll 输出当前目录下的子目录和子文件到控制台 find 文件夹 ：输出当前文件夹下的子孙文件及子孙目录到控制台 find ./ -type f 表示输出当前目录下的所有文件 rm 文件 ：删除文件 mv 文件 ：文件重命名 cat 文件名：查看对应文件的内容 vim 编辑器（En输入状态） vim 文件名，然后按 i 变成插入模式编辑 按下esc 并输入：进行命令的执行 esc 退出插入模式 wq 保存退出 set nu 设置行号 git对象 向数据库存入数据，git对象在.git/objects目录下 git中的数据是以哈希值作为索引的。 echo ‘hello world’ | git hash-object –stdin 返回指定内容的哈希值 echo ‘hello world’ | git hash-object -w –stdin 数据写入数据库，保存为哈希值 –stdin是指向当前新建内容的路径，对于已有的文件，此处换成路径即可 已有文件：git hash-object -w ./go.txt git cat-file -p 哈希值 ，用来输出对象的内容 git cat-file -t 哈希值 ，用来示意存储的对象类型 已经存入数据库的文件内容，若想同步更改的内容，需要再次执行git hash-object -w 路径，生成新的哈希值，即完成文件内容的更迭。 git对象所存入数据库的只是文件的内容，即存储的形式以文件内容作为起始而非以文件名作为起始。 文件内容多次修改，就同步多个哈希值，每次获取相应的内容要输入不同的冗长的哈希字符 上面所用方式均是直接提交到数据库，没有涉及暂存区的内容 树对象 把文件放进暂存区，再提交成为树对象。暂存区文件在.git/index 中 git update-index –add –cacheinfo 100644 \\ 哈希值 文件名 –add 指的是首次加入到暂存区 –cacheinfo 指的是要添加的文件位于数据库中 生成文件树对象，即是将暂存区的项目生成文件快照 git write -tree 查看暂存区 git ls-files -s 查看树对象 git cat-file -p 哈希值 一般在项目尚未完成之前，需要将修改和新增的文件放入暂存区，待到时机成熟，执行git write-tree命令，生成文件树，即产生项目的新一个版本 把一个树对象捆绑在另一个树对象上 这种捆绑是指将发生改动的一个文件联系在一起，形成一个脉络网 git read-tree –prefix=bak 树对象哈希值 ，即可完成绑定 git write-tree 生成一个新的树对象，可以清晰看到版本的更迭 树对象流程 创建一个新文件1，提交到数据库，放入暂存区，执行git write-tree，这其中生成了一个git对象和tree对象 修改文件1，创建新文件2，然后提交到数据库，放入暂存区，执行git write-tree，这时候暂存区修改的新文件覆盖旧的文件，于是又生成了2个git对象，1个新的tree对象 将前一个树对象加到第2个树对象上 流程示意图 提交对象 echo ‘ ‘ | git commit -tree 树对象哈希值 ，完成首次提交 echo ‘ ‘ |git commit-tree 第2个树对象哈希值 -p 父对象哈希值（即上次提交对象） 提交对象的格式 顶层对象，即当前项目快照 作者/提交者信息+时间戳 留空一行 提交注释 可以得出结论:提交对象是一个封装对象，封装了树对象以及相关的信息，而且提交对象是一个链式的关系，它可以追溯到父对象，进而是实现版本控制 关系图 Git高层命令 高层命令一 git init 初始化仓库 git add ./ 生成git对象，存入暂存区 git hash-object -w 文件路径 git update-index –add –cacheinfo 100644 \\ 哈希值 文件名 git commit -m “ 注释内容 “ git write-tree 生成树对象 git commit-tree 提交对象 高层命令二 文件跟踪 未跟踪文件 ：未进行add ./命令操作，即是没有进入数据库 已跟踪文件：已进行add./命令操作，存在3中状态：已修改，已暂存，已提交 git status 检查当前文件状态，已修改显示红色，已暂存显示绿色，已提交无提示 git diff 查看哪些文件修改而没有暂存 git diff –staged 查看哪些文件已暂存而没有提交 git commit -m “少注释模式” git commit 回车进入vim编辑注释模式 git commit -a 跳过暂存区，直接提交，对于已经暂存过的文件 git log 查看历史日志信息 git log –oneline 查看提交记录 git rm 文件名 删除文件并将修改加入暂存区 git vm 文件名 重命名文件并将修改加入暂存区 Git分支 分支即是所指定的提交对象，不过是由HEAD确定指向哪个提交对象，切换HEAD的指向即是切换到新分支 HEAD默认是指向master分支，每次提交更新，HEAD会跟随分支往前移动 创建分支 git branch 显示分支列表 git branch 分支名称 创建一个新的分支 HEAD指向当前的分支 切换分支 git checkout 分支名称 创建并且切换到该分支 git checkout -b 分支名称 删除分支 git branch -D 分支名称 强制删除分支 git branch -d 分支名称 删除分支 为了避免HEAD指向一个空的分支，先要切换到主分支，git checkout master 查看最后一次分支提交对象 git branch -v 创建一个新分支指向特定的提交对象，即是创建一个新分支回到某个提交版本 git branch 名称 提交对象哈希值 查看所有分支的提交记录 命令：git log –oneline –decorate –graph –all 配置别名 git config –global alias.自定义名称 “log –online …” 切换分支操作的弊端： 当从一个有很多新增文件的新分支切换到master分支时，工作目录会复原到maser的节点状态 切换分支影响了3个地方： HEAD 指针 暂存区 工作目录 所以在切换分支前当前分支要做好提交工作，防止切换分支引起文件丢失 合并 git checkout master ，切换到主分支 git merge 分支名称 ，合并 fast-forword ， 快进合并，主分支往前移，合并掉新分支 并行合并，主分支合并掉分支后与分支的合并 git存储 保存当前的项目修改，使其没有真正提交，而又能切换到其他分支进行开发，等再次使用时直接调用该项目 对于一个没有完成的项目而言，反复的提交对象会增加版本库的储存，也会使版本变得混乱，所以要确保项目改动完毕后再进行提交 git stash list , 查看已有的存储，即还在进行的分支项目 git存储后和git commit 的git status 状态是一样的 git stash 将未完成的修改文件保存在一个栈上 git stash apply 在任何时候应用这些改动 git stash drop 栈上元素 ，删掉该栈内元素 git stash pop 应用存储后立即在栈内扔掉它 git stash +git stash drop的组合使用 Git撤销操作 根据git提示命令撤销暂存和工作目录 git restore … , 撤销工作目录文件的修改，使其回到原状态 git restore –staged … , 撤销暂存区的文件到工作目录，已修改未暂存的状态 其它方法来撤销暂存和工作目录 git checkout , 撤销工作目录文件的修改，使其回到原状态 git reset HEAD , 撤销暂存区的文件到工作目录，已修改未暂存的状态 git commit –amend , 撤销提交，修改当前提交的注释信息，完成1次提交 Git撤销操作的底层命令解释 git reset -soft HEAD~ 实际上等价于 git commit –amend HEAD即是对应的提交对象的哈希值 执行该命令，HEAD带着分支一起移动, 本质上是撤销了最近一次的git commit命令，当再次运行git commit时，git会创建一个新的提交，并移动HEAD所指向的分支指向该提交对象 git reset [–mixed] HEAD~ 实际上等价于 git reset HEAD 执行该命令，HEAD带着分支一起移动, 改变了暂存区 git reset HEAD , 只改变暂存区 git reset –hard HEAD~ 实际上等价于 git checkout ，git checkout 其后可以跟上文件名，就等于 git checkout 的操作 –hard 属于危险的命令操作 该命令改变了版本库，暂存区，工作目录 git checkout commithash 与 git reset –hard HEAD~ 的比较 git checkout commithash 只移动HEAD 它通过检查来确保修改的文件不丢失 实际场景：当新分支文件尚未完成，没有进行存储和提交，突然切换到其他分支时，其他分支在覆盖工作目录，暂存区和提交对象时会检查这些修改的文件并一块带走。 git reset –hard HEAD~ HEAD带着分支一起移动 强制切换 Git tag 打标签 git tag 列出标签 git tag 标签名 ，创建标签 git tag 标签名 哈希值 ， 给特定提交对象打标签 git show 查看标签 git tag -d 标签名称 ， 删除标签 标签分类 轻量标签 特定提交的引用 附注标签 存储在数据库的完整对象，它可以被检验，包含打标签的名字，电子邮件，日期时间 Eslint 代码检查 Eslint是一个第三方的js语法检查工具，它基于node.js 编写 npm install eslint –save dev ，安装eslint npx eslint init , 初始化配置 npx eslint .src/*.js ，测试src目录下的js 文件 Git远程仓库 添加一个新的远程仓库，为该仓库添加别名 git remote add 别名 远程仓库地址 显示远程仓库的别名以及url git remote -v 查看一个远程仓库的更多信息 git remote show [remote-name] 推送本地仓库到远端 git push [remote-name] [branch-name] branch-name, 是本地分支的名称 remote-name , 是远程仓库的别名 克隆远端仓库到本地 git clone 项目地址、 同步远端仓库的数据 git fetch 分支名称 查看所有跟踪分支 git branch -vv 正常数据推送和拉取步骤 确保本地仓库已经跟踪了远程跟踪分支 git pull ， 拉取数据 git push ， 上传数据 对于没有跟踪远程分支的情况 git push [remote-name] [branch-name]，基本推送方式 让本地分支去跟踪一个远程分支 在克隆项目时，已经自动生成了一个本地分支master去跟踪相应的远程分支 在新建其他分支时，可以指定要跟踪的远端分支 git checkout -b 本地分支名 远程跟踪分支 git checkout -track 远程跟踪分支 将一个创建好的本地分支，变成一个跟踪分支去跟踪远程跟踪分支 git branch -u 远程跟踪分支 "},{"title":"自定义栅格系统与Bootstrap.css","date":"2020-12-09T16:08:02.000Z","url":"/posts/ab8f8277.html","tags":[["栅格系统","/tags/%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F/"]],"categories":[["bootstrap3","/categories/bootstrap3/"]],"content":"自定义栅格系统基于对Bootstrap中栅格系统源码的解读，修改相关参数和命令，即可打造高度自定义的栅格系统 引入源码Less文件，转换成CSS文件 自定义Bootstrap.css引入源码Less文件，需要注意源码文件应放在当前父文件目录下，使文件可被读取 然后通过添加修改后的相关代码覆盖源码的方式来完成自定义，最后转换成CSS文件即可 一般使用，或许无需再加改动样式源码 若要达到特殊的效果，打破固有的设定，则会用到 对于有些复杂的实现和需求，我想往往会放弃bootstrap的模板，需要重新去写，这个可能就会经常碰到"},{"title":"栅格响应式工具","date":"2020-12-09T16:06:54.000Z","url":"/posts/a32ed02f.html","tags":[["栅格系统","/tags/%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F/"]],"categories":[["bootstrap3","/categories/bootstrap3/"]],"content":"利用媒体查询功能使用工具类可以方便的针对不同设备展示或隐藏页面内容 visible-xs -sm -md -lg 开始时隐藏，媒体查询到指定区域时才显示 hidden-xs -sm -md -lg 开始时显示，媒体查询到指定区域时隐藏 该属性指定到外层包裹器上 "},{"title":"AUTO与100%的分别","date":"2020-12-09T16:03:51.000Z","url":"/posts/4ec81550.html","tags":[["width","/tags/width/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":"width:auto or width:100%width:auto width:100% 比较 auto默认宽度自适应整个视窗，内边距部分则是从中减去。有点类似于 border-box 的感觉 100%其实是个固定的宽度值，内边距在此基础上增加。 "},{"title":"栅格系统盒模型分析","date":"2020-12-09T16:01:53.000Z","url":"/posts/9877cb9d.html","tags":[["栅格系统","/tags/%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F/"]],"categories":[["bootstrap3","/categories/bootstrap3/"]],"content":"栅格系统个层级内边距的分析容器上 行 列 分析 列的规则：列有左右内边距，列间槽宽30px 使列包裹行：若在单行双列的基础上，单列在增加行，则列间槽宽为45px,为保持列的规则，故设左右负边距 使容器包裹行：负内边距使行超越容器边界，故增加边距抵消之 "},{"title":"栅格系统源码解读","date":"2020-12-09T15:58:01.000Z","url":"/posts/eacda123.html","tags":[["栅格系统","/tags/%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F/"]],"categories":[["bootstrap3","/categories/bootstrap3/"]],"content":"栅格系统文件结构 variables.less gird.less mixins clearfix.less gird.less gird-framework.less 分析 gird.less 中的内容 guid.less是栅格系统的主要结构文件，主要分4个方面 container width Fluid container Row Columns make-grid-columns(); 不同媒体查询下列的公共样式 .make-grid(xs); 移动端设备屏幕尺寸 &lt;768px .make-grid(sm); 平板设备屏幕尺寸 &gt;=768px .make-grid(md); 中屏pc屏幕尺寸 &gt;=992px .make-grid(lg); 大屏pc 屏幕尺寸&gt;=1200px 容器.container 和 .fluid container 的相同之处：拥有共同的混合.container-fixed() 固体容器和流体容器左右外边距都为auto，这意味着2个容器都是水平居中的 固体容器和流体容器都拥有相同的左右、内边距以及前后的清除浮动 这2种容器都是响应式的栅格系统布局，不同之处在于容器的宽度，固体容器则使用媒体查询，在不同尺寸的屏幕中有不同的容器宽度设定，而流体容器则自适应屏幕的宽度，宽度永远保持在视口宽度的100% .fluid container 流体容器width:auto.container固体容器的特别之处，不同的媒体查询下有不同的容器宽度 Row 行 行拥有左右的负边距以及前后的清除浮动 Column 列.make-grid-columns() 不同媒体查询下列的公共样式 公共样式：相对定位，最小行高，左、右内边距，左浮动 移动端列的宽度、列排序、偏移 列的宽度 列的偏移当@type=offset时，推算列的偏移 列的排序push (left)当@type=push时，推算列的排序，决定left值 pull (right)当@type=pull时，推算列的排序，决定right值 其他设备当@class=sm,md.lg时，会推算出不同设备的宽度、列偏移、列排序。"},{"title":"Less学习指南","date":"2020-12-01T12:16:10.000Z","url":"/posts/a9d5fddb.html","categories":[["Less","/categories/Less/"]],"content":"less简介 Less （Leaner Style Sheets 的缩写） 是一门向后兼容的 CSS 扩展语言。LESS 将 CSS 赋予了动态语言的特性，如 变量， 继承， 运算， 函数. LESS 既可以在 客户端 上运行 (支持IE 6+, Webkit, Firefox)，也可以借助Node.js或者Rhino在服务端运行。 我个人觉得使用less在书写大量的样式代码时显得十分重要，它通过变量、继承、混合、嵌套等语言特性，会极大提高css的书写效率，而且它的代码结构很好地保持了html的文档结构，也更加清晰易读！ 基于node.js的less 通过npm安装npm install less -g 命令行用法示例lessc style.less style.css 变量 less代码 编译后 嵌套 less代码 编译后 混合混合（Mixin）是一种将一组属性从一个规则集包含（或混入）到另一个规则集的方法。 less代码 编译后 继承less代码 编译后 运算 less代码 编译后 映射 从 Less 3.5 版本开始，你还可以将混合（mixins）和规则集（rulesets）作为一组值的映射（map）使用。 less代码 编译后 作用域 Less 中的作用域与 CSS 中的作用域非常类似。首先在本地查找变量和混合（mixins），如果找不到，则从“父”级作用域继承。 与 CSS 自定义属性一样，混合（mixin）和变量的定义不必在引用之前事先定义 所以对于局部变量来讲，要等到变量加载完毕后做决定 转义转义（Escaping）允许你使用任意字符串作为属性或变量值。任何 ~”anything” 或 ~’anything’ 形式的内容都将按原样输出 less代码 编译后"},{"title":"CARDS主题 & 导航栏样式修改","date":"2020-11-28T15:38:38.000Z","url":"/posts/43277.html","tags":[["hexo主题样式修改","/tags/hexo%E4%B8%BB%E9%A2%98%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/"]],"categories":[["HEXO","/categories/HEXO/"],["原创","/categories/HEXO/%E5%8E%9F%E5%88%9B/"]],"content":"每个人对于主题样式的感觉是不一样的，譬如字体大小，间距，高宽，距离，颜色等，我们可以一定程度内很直观地去修改主题的某些样式。 首先，在浏览器中利用开发者工具进行调试，找到我们所要改动的那部分结构，写入css样式，调试出我们所想得到的结果并记住所对应的样式选择器。 其次，我们需要在cards主题中找到拥有这些样式选择器的模块，修改代码，写入我们刚刚调试过的代码，最后执行清理、部署、运行即可。 主题main_color颜色配置，自定义喜欢的色调 导航栏顶部固定以及子栏目间距调整 在浏览器开发者工具模式预先调试出理想的样式，找出对应的选择器 在themes\\cards\\source\\css\\style\\_functions\\header.styl文档中，找到对应的选择器，修改样式 写在最后在最起初建站时，对HEXO还是足够陌生的！对于这样的系统文档的结构总是摸不到头脑。我其实一开始就想更改某些样式，但是无从下手，郁闷极了！ 在这种程度的状况下，我从配置文档说明开始研究，能搞懂多少是多少，在三番五次的折腾中，局势就慢慢开朗了！当然折腾从未结束，更多的问题还要去琢磨。"},{"title":"HEXO & CARDS主题进阶配置","date":"2020-11-28T13:09:24.000Z","url":"/posts/40862.html","tags":[["hexo主题配置","/tags/hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"]],"categories":[["HEXO","/categories/HEXO/"],["原创","/categories/HEXO/%E5%8E%9F%E5%88%9B/"]],"content":"在默认的card主题之上，我设置了标签、分类、搜索、夜间模式、页面目录、footer部分以及延伸引入rss订阅,那么第二步要进行的是进一步丰富主题的功能和样式 为文章添加缩略图 可选择创建折叠文本样式 文章置顶设置 添加字数统计和阅读时长功能 为文章添加缩略图 打开 themes/cards/_config.yml配置文件，开启为true即可 在front-matter中，声明thumbnail，添加图片链接 可选择创建折叠文本样式 打开 themes/cards/_config.yml配置文件，打开fold内容折叠插件 在文章中使用插件，默认内容折叠 内容折叠默认展开，点击时折叠 文章置顶设置 官方插件原始文档 hexo-generator-topindex 安装$ npm install hexo-generator-topindex --save 在front-matter设置top属性，top值越大，优先级越高 我个人在最初使用时，好像提示该插件已经存在，似乎主题内置，很不clear，我是直接在头部声明top值就可置顶 为文章添加字数统计和阅读时长功能 官方插件文档 hexo-wordcount 安装插件npm i --save hexo-wordcount 找到主题文件夹下该路径themes\\cards\\layout\\_partial\\post\\post-content.ejs,添加代码，添加自定义文字，完成设定，注意：不要随意更改代码 原始文档 添加代码后 "},{"title":"HEXO & 给博客添加RSS","date":"2020-11-27T09:58:54.000Z","url":"/posts/60340.html","tags":[["hexo主题配置","/tags/hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"]],"categories":[["HEXO","/categories/HEXO/"]],"content":"Hexo是一个简洁、高效、易用的博客框架，同时它拥有十分丰富的主题环境，本次我们所谈到的是cards主题，但是该主题的原生环境里没有相关的rss配置，所以我们需要采用手动添加的方式，进而实现rss功能的添加 安装feed插件cnpm install hexo-generator-feed 配置 _ config.yml文件，启用插件配置博客工程目录下的 _ config.yml文件 配置theme/cards主题中的 _ config.yml文件 生成rss hexo clean清除缓存 hexo generate生成静态文件 hexo deploy部署网站 hexo server启动服务器，即可在本地查看效果 复制菜单栏RSS项的链接，在rss阅读器中成功添加链接即可收到文章推送 "},{"title":"何为flex布局？","date":"2020-11-26T10:26:46.000Z","url":"/posts/22461.html","tags":[["flex","/tags/flex/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":" 简介：flex 是一个CSS的display 属性中新添加一个值。 随着inline-flex的使用，它将使它适用的元素成为一个flex container（伸缩容器），而这个元素的每个子元素将成为 flex item（伸缩项目）。 伸缩项目将参与到flex布局中，所有由CSS Flexible Box Layout Module（CSS伸缩盒布局模型）定义的属性都能被它们使用 主轴:默认情况下，主轴是x轴，侧轴是y轴，项目则排列在主轴方向上 flex 属性是flex-grow, flex-shrink 和 flex-basis 属性的简写。 参考文章 Flex布局教程 flex布局新、旧版属性对比 作用于 属性 新版flex 旧版flex 备注 容器上 语法 display:-webkit-flex/flex display:-webkit-box / 容器上 主轴方向 flex-direction:row/row-reversecolumn/column-reverse -webkit-box-orient:horizonal/vertical-webkit-box-direction:normal/reverse 主轴：x轴/y轴侧轴：与主轴垂直的另外一轴 容器上 主轴对齐方式 justify-content:flex-start/flex-end/centerspace-between/space-around -webkit-box-pack:start/end/center/justify 富余空间：取值为flex-start或start时富余空间在主轴的正方向上取值为flex-end或end时富余空间在主轴的反方向上 容器上 侧轴对齐方式 align-items:flex-start/flex-endcenter/baseline/strech -webkit-box-align:start/end/center 富余空间：取值为flex-start或start时富余空间在主轴的正方向上取值为flex-end或end时富余空间在主轴的反方向上 项目上 富余空间 flex-grow:0/1/auto -webkit-box-flex:0/1 flex-grow定义项目的放大比例 新版flex新增特性 作用于 属性 备注 容器上 flex-wrap:nowrap/warp/wrap-reverse 默认单行排列，宽度压缩时项目缩小取值非nowrap时，即是拥有侧轴方向wrap 侧轴正方向 wrap-reverse 侧轴反方向 容器上 align-content:start/end/center/space-between/space-around-strech 多行对齐时的整体堆砌方式 容器上 flex-grow:flex-direction+flex-wrap 决定着主轴、侧轴的方向 项目上 order:number 给项目标记数字，控制项目顺序 项目上 align-self: auto/start/end/center/space-between/space-around-strech 除去容器的align-items的设定，只管理自身的侧轴对齐方式 项目上 flow-basis:auto/0/1/autoflex-shrink:1/0/auto flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）它可以设为跟width或height属性一样的值，将项目占据固定空间 flex-shrink定义项目的缩小比例 等宽布局"},{"title":"全面了解transform属性","date":"2020-11-26T09:58:00.000Z","url":"/posts/45772.html","tags":[["transform","/tags/transform/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":"transform取值 none：默认值，即是无转换 matrix(,,,,,)：以一个含六值的(a,b,c,d,e,f)变换矩阵的形式指定一个2D变换，相当于直接应用一个[a,b,c,d,e,f]变换矩阵 translate([, ])：指定对象的2D translation（2D平移）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0 translateX()：指定对象X轴（水平方向）的平移 translateY()：指定对象Y轴（垂直方向）的平移 rotate()：指定对象的2D rotation（2D旋转），需先有transform-origin属性的定义 scale([, ])：指定对象的2D scale（2D缩放）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值 scaleX()：指定对象X轴的（水平方向）缩放 scaleY()：指定对象Y轴的（垂直方向）缩放 skew( [, ])：指定对象skew transformation（斜切扭曲）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认值为0 skewX()：指定对象X轴的（水平方向）扭曲 skewY()：指定对象Y轴的（垂直方向）扭曲 transform-origin属性定义：transform-origin 属性允许您改变被转换元素的位置(即是参考点)，需要了解的是，在transform中的存在的坐标系为，X轴向右，Y轴向下，Z轴朝向屏幕方向 取值： 默认值：50% 50% 0 ，基点即是2D所在图形的几何中心，在3D中即是绕着z轴旋转 取百分值%，依据坐标轴位置取百分值 length，依据坐标轴的位置取距离值 translate取值不受该属性的影响 取方向值，left,right,top,bottom center(即是center center或50% 50%) top(即是top center或50% 0) right(即是right center或100% 50%) bottom(即是bottom center或50% 100%) left(即是left center或0 50%) top left(即是0% 0%) top right(即是100% 0%) bottom left(即是0% 100%) bottom right(即是100% 100%) transform3D transform3D,是在translate2D的基础上增加z轴方向上的维度，再通过增加某些3D属性，营造出3D的感觉 rotate3D,默认情况下rotate的旋转中心是绕着z轴转动的转动方向依据顺正逆负，rotate( deg)=rotatez( deg),rotatex( deg)即是绕x轴由外往内旋转，rotatey( deg)即是绕y轴反向翻书方向旋转 transform:rotate3D(1,1,1,360deg);即是绕着三维空间的正方向距离起始位置较近的地方旋转 transform:translatez(100px) 对于x/y轴平移可以使用占用自身尺寸的百分比，z轴则只能使用length perspective景深即是我们眼睛注视屏幕的距离，它的作用是搭建舞台。它是一个不可继承的属性，但它可以作用于所有的后代元素。景深越大，灭点（随视角逐渐消失的点）越远，变形越小；景深越小，灭点越近，变形越大 transform-style的作用亦是搭建舞台，使3D舞台有层次感，该属性值仅作用于父元素 "},{"title":"CSS3 resize属性","date":"2020-11-21T07:50:12.000Z","url":"/posts/37811.html","tags":[["resize","/tags/resize/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":"语法： resize：none | both | horizontal | vertical 默认值：none 适用于：所有设置了overflow除了visible之外的元素 继承性：无 说明： 设置或检索对象的区域是否允许用户缩放，调节元素尺寸大小。如果希望此属性生效，需要设置对象的overflow属性，值可以是auto,hidden或scroll。对应的脚本特性为resize。 代码示例及效果 "},{"title":"利用伪类选择器:target制作多Tab切换效果","date":"2020-11-21T06:23:16.000Z","url":"/posts/4017.html","tags":[[":target","/tags/target/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":":target CSS 伪类 代表一个唯一的页面元素(目标元素)，其ID与当前URL片段匹配 标签a所拥有的片段（带有#标识的），该片段指向一个ID为leftBox的页面元素，上方片段的url=下方元素的ID 于是下方的元素可通过:target选择器被选中，在点击a标签时，div:target选择器的样式生效，发生改变。 完整代码及效果如下： "},{"title":"CSS3综合案例三","date":"2020-11-18T02:30:17.000Z","url":"/posts/30376.html","tags":[["transition","/tags/transition/"],["border-radius","/tags/border-radius/"],["relative","/tags/relative/"],["absolute","/tags/absolute/"],["text-decoration","/tags/text-decoration/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":"仿天猫专题栏过渡效果实例需求 鼠标移入商品栏时，增加透明度 鼠标移入商品栏时，商品主图向左偏移几许，缓缓过渡 实例详情 效果"},{"title":"CSS3综合案例二","date":"2020-11-18T02:30:09.000Z","url":"/posts/5481.html","tags":[["transition","/tags/transition/"],["transform","/tags/transform/"],["opacity","/tags/opacity/"],["z-index","/tags/z-index/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":"旧样式，仿天猫商品过渡效果实例需求 商品被包裹在圆形的底环下，为此要制作一个底环 当鼠标移入商品栏时，边距凸显红色 当鼠标移入商品栏时，图片变得透明几许 当鼠标移入商品栏时，商品主图过渡比例扩大，突出底环 实例详情 效果"},{"title":"CSS3综合案例一","date":"2020-11-18T02:30:01.000Z","url":"/posts/28776.html","tags":[["transition","/tags/transition/"],["transform","/tags/transform/"],["border-radius","/tags/border-radius/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":"制作鼠标悬停，画面比例放大的效果实例需求 鼠标移入，画面扩大一定比例，移出则回归原态 画面扩大的过程要平滑进行 实例展示 效果"},{"title":"transition过渡效果","date":"2020-11-18T02:29:43.000Z","url":"/posts/64027.html","tags":[["transition","/tags/transition/"],["cursor","/tags/cursor/"],[":hover","/tags/hover/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":"transition过渡效果transition同样亦是一个简写属性 transition-property: 属性选项 all指代所有属性，在这也可以只设置width/height，应用于单独某个属性 transition-duration:动画持续时间 transition-delay:延迟时间 transition-timing-function: esae是默认值，即整个过程先慢后快再慢。如果是ease-in,即是先慢后快；ease-out,即是先快后慢；ease-in-out,即是先慢后快再慢，和ease效果几乎等同实例 效果 "},{"title":"关于opacity的实例应用","date":"2020-11-18T02:29:32.000Z","url":"/posts/859.html","tags":[["opacity","/tags/opacity/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":"关于opacity的实例应用综合应用 制作透明背景，凸显文字内容（实例一） 天猫商品栏图片鼠标移入透明度减低的效果（实例二） 实例一 效果 实例二 效果"},{"title":"伪类选择器和伪元素","date":"2020-11-17T05:15:00.000Z","url":"/posts/49535.html","tags":[["伪元素","/tags/%E4%BC%AA%E5%85%83%E7%B4%A0/"],["伪类选择器","/tags/%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":"伪类选择器和伪元素伪类选择器 常用动态伪类选择器 (链接伪类) a:link a:visited a:hover a:active 常用UI状态选择器 (表单伪类) input:enable input:disabled input:checked 结构伪类选择器 使用结构伪类的各种属性选定子元素的方式，减少了类、id选择器的使用 常用结构伪类 :nth-child() :first-child() :last-child() :only-child()伪元素 常用伪元素 ::before ::after ::first-letter ::first-line 通过伪元素添加到元素区域的内容，是不可选中的，由于是伪元素 ::before,::after的妙用 通过在::before,:after中添加图片，实现图文布局 通过在::before,:after中绘图与元素组合，绘制特别的形状，诸如五角形、六角形、五边形、六边形、太极图等 意义：使样式更大限度回归到css中实现，更进一步实现结构和样式分离，层次分明 实例应用 动态伪类和ui元素伪类选择器 效果 结构伪类选择器 效果 伪元素使用 效果 ​ "},{"title":"border-radius画圆以及border绘制图形","date":"2020-11-16T16:00:00.000Z","url":"/posts/47609.html","tags":[["border-radius","/tags/border-radius/"],["border","/tags/border/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":"border-radius画圆以及border绘制图形1. 利用border-radius绘制圆形类图形 border-radius是一个简写属性，它包含4个方向的属性设置 border-top-left-radius左上， border-top-right-radius右上 border-bottom-left-radius左下 border-bottom-right-radius右下 另外每个方向上的border-radius值由x/y方向上的半径决定，1个半径值则是正圆弧，2个半径值则是椭圆弧 4个值: 第一个值为左上角，第二个值为右上角，第三个值为右下角，第四个值为左下角。 3个值: 第一个值为左上角, 第二个值为右上角和左下角，第三个值为右下角 2个值: 第一个值为左上角与右下角，第二个值为右上角与左下角 1个值：四个圆角值相同 正方形+border-radius:50%即是正圆（如下示例） 若正方形任意一边缩减至1/2,则会绘制不同方向上的半圆和关于原点对称的圆弧（如下示例） 若正方形整体缩减1/2,则会绘制不同方向上的扇形（如下示例） 大小圆形的堆砌就会形成一个太极阴阳图（如下示例） 示例1 效果 示例2 效果 2. 妙用border属性绘制各种不同的形状 在1个只设有4边边距的盒子模型里，它呈现的结果是4个紧密集中的等腰三角形（如下示例） 在这4个紧密的等腰三角形中，左右2边边距决定的是这个盒子的宽度，上下2边边距则是盒子的高度 通过设置其中某边边距为0，或者相邻边边距透明，以及x/y方向上的边距，即可得到一个三角形和等腰直角三角形（如下示例） 在1个设有4边边距和内容区宽度的盒子模型里，通过边距为0和边距透明，会得到某个方向上的梯形（如下示例） 在梯形、三角形、矩形的基础上，通过伪元素即可组合得到五边形和六边形，或者五角形、六角形（如下示例） 三角形、等腰直角三角形、对话框示例 效果 五边形、六边形示例 效果 五角形、六角形示例 效果 "},{"title":"关于CSS3动画","date":"2020-11-16T16:00:00.000Z","url":"/posts/11943.html","tags":[["keyframes","/tags/keyframes/"],["animation","/tags/animation/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":"CSS3动画制作一个CSS3动画需要2步 声明CSS3@keyframes规则 @keyframes规则内指定一个CSS样式和动画将逐步从目前的样式更改为新的样式 利用百分比来规定变化发生的时间，或用关键词from和to,等同于0%和100% 0%是动画的开始，100%是动画的结束 为了得到浏览器的最佳支持，应该始终定义0%和100% 将CSS3@keyframes规则绑定到指定的选择器上，使用animation设定动画属性 animation是简写属性 animation-name即是动画关键帧名字 animation-dration即是动画持续时间 animation-timing-function即是动画过渡函数 属性值有：linear/ease/ease-in/ease-out/ease-in-out animation-delay即是延迟时间 animation-iteration-count即是动画执行次数 对于属性值：infinite 即是无限循环 animation-direction即是动画执行方向 属性值normal为正常，alternate为反向播放*/ 简单的动画实例 loding加载动画 loding效果 矩形移动动画 效果 "},{"title":"关于渐变","date":"2020-11-16T16:00:00.000Z","url":"/posts/37680.html","tags":[["线性渐变","/tags/%E7%BA%BF%E6%80%A7%E6%B8%90%E5%8F%98/"],["径向渐变","/tags/%E5%BE%84%E5%90%91%E6%B8%90%E5%8F%98/"],["重复性渐变","/tags/%E9%87%8D%E5%A4%8D%E6%80%A7%E6%B8%90%E5%8F%98/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":"关于渐变线性渐变 线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向 语法background-image: linear-gradient(direction, color-stop1, color-stop2, ...);径向渐变 径向渐变（Radial Gradients）- 由它们的中心定义 语法background-image: radial-gradient(shape size at position, start-color, ..., last-color);线性渐变的使用角度实例 background-image:linear-gradient(to right,red 20%, blue 50%, green 80% background-image:radial-gradient(lightgreen 10%,lightgray 50%) background-image:repeating-linear-gradient(lightgreen 10%,lightblue 20%) 重复性线性渐变，径向渐变亦然 "},{"title":"文本特效和文本省略号","date":"2020-11-16T16:00:00.000Z","url":"/posts/38919.html","tags":[["text-shadow","/tags/text-shadow/"],["text-overflow","/tags/text-overflow/"],["white-space","/tags/white-space/"]],"categories":[["CSS3","/categories/CSS3/"]],"content":"text-shadow完成字体特效 效果 文本省略号 效果 "},{"date":"2020-11-27T15:11:47.139Z","url":"/404.html","categories":[[" ",""]],"content":" "},{"date":"2020-11-27T15:09:30.655Z","url":"/404.html","categories":[[" ",""]],"content":" "},{"title":"分类","date":"2020-12-02T02:58:28.745Z","url":"/categories/index.html","categories":[[" ",""]]},{"title":"搜索","date":"2020-12-02T02:57:46.993Z","url":"/search/index.html","categories":[[" ",""]]},{"title":"标签","date":"2020-11-17T12:02:38.000Z","url":"/tags/index.html","categories":[[" ",""]]}]